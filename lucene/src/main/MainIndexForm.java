/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import constant.ConnectionPool;
import constant.IndexConst;
import indexer.AuthorIndexer;
import indexer.CcidfIndexer;
import indexer.ConferenceIndexer;
import indexer.JournalIndexer;
import indexer.KeywordIndexer;
import indexer.OrgIndexer;
import indexer.PaperIndexer;
import indexer.SubdomainIndexer;
import indexer._RankAuthorIndexer;
import indexer._RankConfIndexer;
import indexer._RankJournalIndexer;
import indexer._RankKeyIndexer;
import indexer._RankOrgIndexer;
import indexer._Rank_Paper;
import java.io.File;
import java.io.IOException;

/**
 *
 * @author tiendv
 */
public class MainIndexForm extends javax.swing.JFrame {

    private String path = "E:\\";
    private Boolean aut = false;
    private Boolean con = false;
    private Boolean jou = false;
    private Boolean org = false;
    private Boolean key = false;

    /**
     * Creates new form MainIndexForm
     */
    public MainIndexForm() {
        initComponents();
        this.setDisabledAll();
        this.btRankPaper.setEnabled(true);
        this.btCcidfIndexer.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtPassWord = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDatabase = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btPaperIndexer = new javax.swing.JButton();
        prBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtalog = new javax.swing.JTextArea();
        btRankPaper = new javax.swing.JButton();
        btAuthorIndexer = new javax.swing.JButton();
        btConferenceIndexer = new javax.swing.JButton();
        btJournalIndexer = new javax.swing.JButton();
        btKeywordIndexer = new javax.swing.JButton();
        btOrgIndexer = new javax.swing.JButton();
        btSubdomainIndexer = new javax.swing.JButton();
        txtPath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btCcidfIndexer = new javax.swing.JButton();
        btRankAuthorIndexer = new javax.swing.JButton();
        btRankConfIndexer = new javax.swing.JButton();
        btRankJournalIndexer = new javax.swing.JButton();
        btRankKeyIndexer = new javax.swing.JButton();
        btRankOrgIndexer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Index data PubGuru");

        jLabel1.setText("Username");

        jLabel2.setText("PassWord");

        txtUserName.setText("root");

        txtPassWord.setText("@huydang1920@");

        jLabel3.setText("Database");

        txtDatabase.setText("cspublicationcrawler");

        jLabel4.setText("Port");

        txtPort.setText("3306");

        btPaperIndexer.setText("PaperIndexer");
        btPaperIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPaperIndexerActionPerformed(evt);
            }
        });

        txtalog.setColumns(20);
        txtalog.setRows(5);
        jScrollPane1.setViewportView(txtalog);

        btRankPaper.setText("RankPaper");
        btRankPaper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRankPaperActionPerformed(evt);
            }
        });

        btAuthorIndexer.setText("AuthorIndexer");
        btAuthorIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAuthorIndexerActionPerformed(evt);
            }
        });

        btConferenceIndexer.setText("ConferenceIndexer");
        btConferenceIndexer.setToolTipText("");
        btConferenceIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConferenceIndexerActionPerformed(evt);
            }
        });

        btJournalIndexer.setText("JournalIndexer");
        btJournalIndexer.setToolTipText("");
        btJournalIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btJournalIndexerActionPerformed(evt);
            }
        });

        btKeywordIndexer.setText("KeywordIndexer");
        btKeywordIndexer.setToolTipText("");
        btKeywordIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btKeywordIndexerActionPerformed(evt);
            }
        });

        btOrgIndexer.setText("OrgIndexer");
        btOrgIndexer.setToolTipText("");
        btOrgIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOrgIndexerActionPerformed(evt);
            }
        });

        btSubdomainIndexer.setText("SubdomainIndexer");
        btSubdomainIndexer.setToolTipText("");
        btSubdomainIndexer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubdomainIndexerActionPerformed(evt);
            }
        });

        txtPath.setText("E:\\");

            jLabel5.setText("Path");

            btCcidfIndexer.setText("CcidfIndexer");
            btCcidfIndexer.setToolTipText("");
            btCcidfIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btCcidfIndexerActionPerformed(evt);
                }
            });

            btRankAuthorIndexer.setText("RankAuthorIndexer");
            btRankAuthorIndexer.setToolTipText("");
            btRankAuthorIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btRankAuthorIndexerActionPerformed(evt);
                }
            });

            btRankConfIndexer.setText("RankConfIndexer");
            btRankConfIndexer.setToolTipText("");
            btRankConfIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btRankConfIndexerActionPerformed(evt);
                }
            });

            btRankJournalIndexer.setText("RankJournalIndexer");
            btRankJournalIndexer.setToolTipText("");
            btRankJournalIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btRankJournalIndexerActionPerformed(evt);
                }
            });

            btRankKeyIndexer.setText("RankKeyIndexer");
            btRankKeyIndexer.setToolTipText("");
            btRankKeyIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btRankKeyIndexerActionPerformed(evt);
                }
            });

            btRankOrgIndexer.setText("RankOrgIndexer");
            btRankOrgIndexer.setToolTipText("");
            btRankOrgIndexer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btRankOrgIndexerActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btRankPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btPaperIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btAuthorIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btConferenceIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btJournalIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btKeywordIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btOrgIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btSubdomainIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btCcidfIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btRankAuthorIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btRankConfIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btRankJournalIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel3))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btRankKeyIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btRankOrgIndexer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 8, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(prBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(27, 27, 27)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btRankPaper)
                        .addComponent(btPaperIndexer)
                        .addComponent(btAuthorIndexer)
                        .addComponent(btConferenceIndexer))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btJournalIndexer)
                        .addComponent(btKeywordIndexer)
                        .addComponent(btOrgIndexer)
                        .addComponent(btSubdomainIndexer))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btCcidfIndexer)
                        .addComponent(btRankAuthorIndexer)
                        .addComponent(btRankConfIndexer)
                        .addComponent(btRankJournalIndexer))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btRankKeyIndexer)
                        .addComponent(btRankOrgIndexer))
                    .addGap(18, 18, 18)
                    .addComponent(prBar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void btPaperIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPaperIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.btPaperIndexer.setEnabled(true);
                this.btRankPaper.setEnabled(true);
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.PAPER_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.btPaperIndexer.setEnabled(true);
                this.btRankPaper.setEnabled(true);
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            PaperIndexer index = new PaperIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btPaperIndexerActionPerformed

    private void btRankPaperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankPaperActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.btRankPaper.setEnabled(true);
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.btPaperIndexer.setEnabled(true);
                this.btRankPaper.setEnabled(true);
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            _Rank_Paper rank = new _Rank_Paper();
            txtalog.setText(txtalog.getText() + rank._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAllRank();
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankPaperActionPerformed

    private void btAuthorIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAuthorIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.AUTHOR_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            AuthorIndexer index = new AuthorIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.aut = true;
            this.setEnabledAllRank();
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btAuthorIndexerActionPerformed

    private void btConferenceIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConferenceIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.CONFERENCE_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            ConferenceIndexer index = new ConferenceIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.con = true;
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btConferenceIndexerActionPerformed

    private void btJournalIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btJournalIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.JOURNAL_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            JournalIndexer index = new JournalIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.jou = true;
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btJournalIndexerActionPerformed

    private void btKeywordIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btKeywordIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.KEYWORD_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            KeywordIndexer index = new KeywordIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.key = true;
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btKeywordIndexerActionPerformed

    private void btOrgIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOrgIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.ORG_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            OrgIndexer index = new OrgIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.org = true;
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btOrgIndexerActionPerformed

    private void btSubdomainIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubdomainIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.SUBDOMAIN_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.setEnabledAll();
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            SubdomainIndexer index = new SubdomainIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btSubdomainIndexerActionPerformed

    private void btCcidfIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCcidfIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Delete folder
            File indexDir = new File(this.path + IndexConst.CCIDF_INDEX_PATH);
            if (indexDir.exists()) {
                delete(indexDir);
            }
            // Connect Database
            ConnectionPool connectionPool = new ConnectionPool(user, pass, database, port);
            if (connectionPool.getConnection() == null) {
                txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                this.btPaperIndexer.setEnabled(true);
                this.btRankPaper.setEnabled(true);
                return;
            } else {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
            }
            CcidfIndexer index = new CcidfIndexer(path);
            txtalog.setText(txtalog.getText() + index._run(connectionPool) + "\nFinished!\n");
            connectionPool.getConnection().close();
            connectionPool = null;
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btCcidfIndexerActionPerformed

    private void btRankAuthorIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankAuthorIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Index
            _RankAuthorIndexer index = new _RankAuthorIndexer(user, pass, database, port, path);
            if (index.folder && index.connect) {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
                txtalog.setText(txtalog.getText() + index._run() + "\nFinished!\n");
            } else {
                if (!index.folder) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to folder!\n");
                }
                if (!index.connect) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                }
            }
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankAuthorIndexerActionPerformed

    private void btRankConfIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankConfIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Index
            _RankConfIndexer index = new _RankConfIndexer(user, pass, database, port, path);
            if (index.folder && index.connect) {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
                txtalog.setText(txtalog.getText() + index._run() + "\nFinished!\n");
            } else {
                if (!index.folder) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to folder!\n");
                }
                if (!index.connect) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                }
            }
            this.setEnabledAll();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankConfIndexerActionPerformed

    private void btRankJournalIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankJournalIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Index
            _RankJournalIndexer index = new _RankJournalIndexer(user, pass, database, port, path);
            if (index.folder && index.connect) {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
                txtalog.setText(txtalog.getText() + index._run() + "\nFinished!\n");
            } else {
                if (!index.folder) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to folder!\n");
                }
                if (!index.connect) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                }
            }
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankJournalIndexerActionPerformed

    private void btRankKeyIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankKeyIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Index
            _RankKeyIndexer index = new _RankKeyIndexer(user, pass, database, port, path);
            if (index.folder && index.connect) {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
                txtalog.setText(txtalog.getText() + index._run() + "\nFinished!\n");
            } else {
                if (!index.folder) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to folder!\n");
                }
                if (!index.connect) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                }
            }
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankKeyIndexerActionPerformed

    private void btRankOrgIndexerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRankOrgIndexerActionPerformed
        // TODO add your handling code here:
        try {
            prBar.setIndeterminate(false);
            prBar.setString("Runing");
            txtalog.setText("Runing\n");
            this.setDisabledAll();
            this.path = this.txtPath.getText();
            String user = txtUserName.getText();
            String pass = txtPassWord.getText();
            String database = txtDatabase.getText();
            int port = Integer.parseInt(txtPort.getText());
            File file = new File(this.path);
            if (!file.exists()) {
                // It returns false if File or directory does not exist
                txtalog.setText(txtalog.getText() + "Directory you are searching does not exist : " + file.exists() + "\n");
                this.setEnabledAll();
                return;
            } else {
                // It returns true if File or directory exists
                txtalog.setText(txtalog.getText() + "Directory you are searching does exist : " + file.exists() + "\n");
                if (!"\\".equals(this.path.substring(this.path.length() - 1, this.path.length()))) {
                    this.path += "\\";
                    this.txtPath.setText(this.path);
                }
            }
            // Index
            _RankOrgIndexer index = new _RankOrgIndexer(user, pass, database, port, path);
            if (index.folder && index.connect) {
                txtalog.setText(txtalog.getText() + "Connect database success!\n Runing \n");
                txtalog.setText(txtalog.getText() + index._run() + "\nFinished!\n");
            } else {
                if (!index.folder) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to folder!\n");
                }
                if (!index.connect) {
                    txtalog.setText(txtalog.getText() + "Error: Can not connect to database!\n");
                }
            }
            this.setEnabledAll();
            this.setEnabledAllRank();
            prBar.setIndeterminate(true);
            prBar.setString("Done index");
        } catch (Exception ex) {
            txtalog.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btRankOrgIndexerActionPerformed

    private void setDisabledAll() {
        this.btAuthorIndexer.setEnabled(false);
        this.btConferenceIndexer.setEnabled(false);
        this.btJournalIndexer.setEnabled(false);
        this.btKeywordIndexer.setEnabled(false);
        this.btOrgIndexer.setEnabled(false);
        this.btPaperIndexer.setEnabled(false);
        this.btRankPaper.setEnabled(false);
        this.btSubdomainIndexer.setEnabled(false);
        this.btCcidfIndexer.setEnabled(false);
        this.btRankAuthorIndexer.setEnabled(false);
        this.btRankConfIndexer.setEnabled(false);
        this.btRankJournalIndexer.setEnabled(false);
        this.btRankKeyIndexer.setEnabled(false);
        this.btRankOrgIndexer.setEnabled(false);

    }

    private void setEnabledAll() {
        this.btAuthorIndexer.setEnabled(true);
        this.btConferenceIndexer.setEnabled(true);
        this.btJournalIndexer.setEnabled(true);
        this.btKeywordIndexer.setEnabled(true);
        this.btOrgIndexer.setEnabled(true);
        this.btPaperIndexer.setEnabled(true);
        this.btRankPaper.setEnabled(true);
        this.btSubdomainIndexer.setEnabled(true);
        this.btCcidfIndexer.setEnabled(true);
    }

    private void setEnabledAllRank() {
        if (this.aut) {
            this.btAuthorIndexer.setEnabled(true);
        }
        if (this.con) {
            this.btRankConfIndexer.setEnabled(true);
        }
        if (this.jou) {
            this.btRankJournalIndexer.setEnabled(true);
        }
        if (this.key) {
            this.btRankKeyIndexer.setEnabled(true);
        }
        if (this.org) {
            this.btRankOrgIndexer.setEnabled(true);
        }
    }

    public static void delete(File file) throws IOException {
        if (file.isDirectory()) {
            //directory is empty, then delete it
            if (file.list().length == 0) {
                file.delete();
                //System.out.println("Directory is deleted : " + file.getAbsolutePath());
            } else {
                //list all the directory contents
                String files[] = file.list();
                for (String temp : files) {
                    //construct the file structure
                    File fileDelete = new File(file, temp);
                    //recursive delete
                    delete(fileDelete);
                }
                //check the directory again, if empty then delete it
                if (file.list().length == 0) {
                    file.delete();
                    System.out.println("Directory is deleted : " + file.getAbsolutePath());
                }
            }
        } else {
            //if file, then delete it
            file.delete();
            System.out.println("File is deleted : " + file.getAbsolutePath());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainIndexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainIndexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainIndexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainIndexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainIndexForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAuthorIndexer;
    private javax.swing.JButton btCcidfIndexer;
    private javax.swing.JButton btConferenceIndexer;
    private javax.swing.JButton btJournalIndexer;
    private javax.swing.JButton btKeywordIndexer;
    private javax.swing.JButton btOrgIndexer;
    private javax.swing.JButton btPaperIndexer;
    private javax.swing.JButton btRankAuthorIndexer;
    private javax.swing.JButton btRankConfIndexer;
    private javax.swing.JButton btRankJournalIndexer;
    private javax.swing.JButton btRankKeyIndexer;
    private javax.swing.JButton btRankOrgIndexer;
    private javax.swing.JButton btRankPaper;
    private javax.swing.JButton btSubdomainIndexer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar prBar;
    private javax.swing.JTextField txtDatabase;
    private javax.swing.JTextField txtPassWord;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextArea txtalog;
    // End of variables declaration//GEN-END:variables
}
